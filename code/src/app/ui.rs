use super::state::{MyEguiApp, ViewMode};
use crate::objects::model3d;
use crate::objects::model3d::Model3D;
use eframe::egui::{Context, SidePanel, CentralPanel, Ui, Vec2, Color32, ScrollArea};

impl MyEguiApp {
    pub fn render_ui(&mut self, ctx: &Context) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        self.setup_custom_styles(ctx);

        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        SidePanel::right("controls_panel")
            .resizable(true)
            .default_width(320.0)
            .show(ctx, |ui| {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏
                ScrollArea::vertical()
                    .auto_shrink([false; 2])
                    .show(ui, |ui| {
                        ui.style_mut().spacing.slider_width = 235.0;
                        ui.heading("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");
                        ui.add_space(10.0);

                        // UI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                        self.render_file_selection(ui);

                        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
                        self.render_morph_controls(ui);

                        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
                        self.render_transform_controls(ui);

                        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        self.render_material_controls(ui);

                        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–æ–º
                        self.render_morph_instructions(ui);

                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤–Ω–∏–∑—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                        ui.add_space(10.0);
                    });
            });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –æ–∫–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        CentralPanel::default().show(ctx, |ui| {
            ui.heading("üçé –ú–æ—Ä—Ñ–∏–Ω–≥ —Ñ—Ä—É–∫—Ç–æ–≤");
            ui.add_space(5.0);

            // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ—Ä—Ö—É
            self.render_view_mode_controls(ui);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.render_viewport(ui);
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
        if let Some(error_msg) = &self.error_message.clone() {
            egui::Window::new("‚ö† –û—à–∏–±–∫–∞")
                .collapsible(false)
                .resizable(false)
                .anchor(egui::Align2::CENTER_CENTER, [0.0, 0.0])
                .show(ctx, |ui| {
                    ui.label(error_msg);
                    ui.separator();
                    if self.styled_button(ui, "OK", Vec2::new(120.0, 32.0)).clicked() {
                        self.error_message = None;
                    }
                });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–¥—Ä
        self.update_frame(ctx);
    }

    fn setup_custom_styles(&self, ctx: &Context) {
        let mut style = (*ctx.style()).clone();

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        style.text_styles.insert(
            egui::TextStyle::Heading,
            egui::FontId::new(20.0, egui::FontFamily::Proportional),
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        style.text_styles.insert(
            egui::TextStyle::Body,
            egui::FontId::new(15.0, egui::FontFamily::Proportional),
        );

        // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (14.0 - —Ö–æ—Ä–æ—à–∏–π)
        style.text_styles.insert(
            egui::TextStyle::Button,
            egui::FontId::new(14.0, egui::FontFamily::Proportional),
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∫–Ω–æ–ø–∫–∞—Ö
        style.spacing.button_padding = Vec2::new(10.0, 6.0);

        // –£–ª—É—á—à–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        style.spacing.item_spacing = Vec2::new(8.0, 8.0);

        ctx.set_style(style);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    fn styled_button(&self, ui: &mut Ui, text: &str, min_size: Vec2) -> egui::Response {
        ui.add_sized(min_size, egui::Button::new(text))
    }

    fn render_file_selection(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.add_space(5.0);
        ui.label("üìÇ –í—ã–±–æ—Ä OBJ —Ñ–∞–π–ª–æ–≤:");
        ui.add_space(8.0);

        // –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        ui.group(|ui| {
            ui.vertical(|ui| {
                ui.horizontal(|ui| {
                ui.label("–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç:");
                ui.add_space(5.0);
                    if !self.selected_source_file.is_empty() {
                        ui.label(format!("{}", self.selected_source_file));
                    }
                });

                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞
                if self.styled_button(ui, "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...", Vec2::new(ui.available_width(), 36.0)).clicked() {
                    self.open_file_dialog(false);
                }
            });
        });

        ui.add_space(8.0);

        // –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
        ui.group(|ui| {
            ui.vertical(|ui| {
                ui.horizontal(|ui| {
                    ui.label("–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç:");
                    ui.add_space(5.0);
                    if !self.selected_target_file.is_empty() {
                        ui.label(format!("{}", self.selected_target_file));
                    }
                });

                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞
                if self.styled_button(ui, "üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...", Vec2::new(ui.available_width(), 36.0)).clicked() {
                    self.open_file_dialog(true);
                }
            });
        });
    }

    fn render_morph_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.add_space(10.0);

        let can_create_morph = self.source_mesh.is_some() && self.target_mesh.is_some();
        let button_text = if self.morph_created { "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥" } else { "‚ú® –°–æ–∑–¥–∞—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥" };

        ui.vertical(|ui| {
            let response = ui.add_enabled(
                can_create_morph,
                egui::Button::new(button_text)
                    .min_size(Vec2::new(ui.available_width(), 40.0))
            );

            if response.clicked() {
                self.create_morph_object();
            }

            if !can_create_morph {
                ui.add_space(3.0);
                ui.colored_label(Color32::from_rgb(200, 100, 100), "‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞");
            }
        });
    }

    fn render_transform_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.add_space(10.0);
        ui.label("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º:");
        ui.add_space(5.0);

        let has_object = match self.view_mode {
            ViewMode::Source => self.source_mesh.is_some(),
            ViewMode::Target => self.target_mesh.is_some(),
            ViewMode::Morph => self.morph_object.is_some(),
        };

        if !has_object {
            ui.colored_label(Color32::from_rgb(200, 100, 100), "‚ö† –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            return;
        }

        // –ü–æ–≤–æ—Ä–æ—Ç
        ui.group(|ui| {
            ui.vertical(|ui| {
                ui.label("üîÑ –ü–æ–≤–æ—Ä–æ—Ç (–≥—Ä–∞–¥—É—Å—ã):");
                ui.add_space(5.0);

                ui.horizontal(|ui| {
                    if self.styled_button(ui, "‚Ü∫ X +15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(15.0, 0.0, 0.0);
                    }
                    if self.styled_button(ui, "‚Üª X -15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(-15.0, 0.0, 0.0);
                    }
                });

                ui.horizontal(|ui| {
                    if self.styled_button(ui, "‚Ü∫ Y +15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(0.0, 15.0, 0.0);
                    }
                    if self.styled_button(ui, "‚Üª Y -15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(0.0, -15.0, 0.0);
                    }
                });

                ui.horizontal(|ui| {
                    if self.styled_button(ui, "‚Ü∫ Z +15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(0.0, 0.0, 15.0);
                    }
                    if self.styled_button(ui, "‚Üª Z -15¬∞", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_rotation(0.0, 0.0, -15.0);
                    }
                });
            });
        });

        ui.add_space(8.0);

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        ui.group(|ui| {
            ui.vertical(|ui| {
                ui.label("üîç –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:");
                ui.add_space(5.0);

                ui.horizontal(|ui| {
                    if self.styled_button(ui, "‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å x1.1", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_scale(1.1);
                    }
                    if self.styled_button(ui, "‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å x0.9", Vec2::new(140.0, 32.0)).clicked() {
                        self.apply_button_scale(0.9);
                    }
                });
            });
        });

        ui.add_space(8.0);

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        if self.styled_button(ui, "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", Vec2::new(ui.available_width(), 36.0)).clicked() {
            self.reset_current_object();
        }
    }

    fn render_view_mode_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.add_space(5.0);

        // –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ FPS —Å–ø—Ä–∞–≤–∞
        ui.horizontal(|ui| {
            ui.label("üëÅ –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:");

            // –ü—Ä–∏–∂–∏–º–∞–µ–º FPS –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
            ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                ui.label(format!("FPS: {}", self.fps as u32));
                ui.label("üìä");
            });
        });

        ui.add_space(8.0);

        let old_view_mode = self.view_mode.clone();

        ui.horizontal(|ui| {
            ui.spacing_mut().item_spacing.x = 8.0;

            // –ö–Ω–æ–ø–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            ui.selectable_value(&mut self.view_mode, ViewMode::Source, "üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π");

            // –ö–Ω–æ–ø–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            ui.selectable_value(&mut self.view_mode, ViewMode::Target, "üéØ –¶–µ–ª–µ–≤–æ–π");

            // –ö–Ω–æ–ø–∫–∞ –º–æ—Ä—Ñ–∏–Ω–≥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º enabled wrapper
            ui.add_enabled_ui(self.morph_created, |ui| {
                let response = ui.selectable_value(&mut self.view_mode, ViewMode::Morph, "‚ú® –ú–æ—Ä—Ñ–∏–Ω–≥");

                if !self.morph_created {
                    response.on_disabled_hover_text("–°–æ–∑–¥–∞–π—Ç–µ –º–æ—Ä—Ñ–∏–Ω–≥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏");
                }
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        if old_view_mode != self.view_mode {
            self.update_scene_objects();
            self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        }
    }

    fn render_morph_instructions(&mut self, ui: &mut Ui) {
        if self.view_mode == ViewMode::Morph && self.morph_created {
            ui.separator();
            ui.add_space(10.0);

            ui.group(|ui| {
                ui.vertical(|ui| {
                    ui.label("‚è± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–æ–º:");
                    ui.add_space(8.0);

                    // –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∑–æ–π –º–æ—Ä—Ñ–∏–Ω–≥–∞
                    let old_phase = self.morph_phase;
                    ui.vertical(|ui| {
                        ui.label("–§–∞–∑–∞:");
                        ui.add_space(3.0);
                        ui.add_sized(
                            Vec2::new(ui.available_width(), 20.0),
                            egui::Slider::new(&mut self.morph_phase, 0.0..=1.0)
                                .step_by(0.01)
                                .fixed_decimals(2)
                        );
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ—Ä—Ñ-–æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if (old_phase - self.morph_phase).abs() > f64::EPSILON {
                        if let Some(ref mut morph) = self.morph_object {
                            morph.update(self.morph_phase);
                        }
                        self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–∑—ã –º–æ—Ä—Ñ–∏–Ω–≥–∞
                    }
                });
            });
        }
    }

    fn render_viewport(&mut self, ui: &mut Ui) {
        ui.separator();

        // –ü–æ–ª—É—á–∞–µ–º –¥–æÔøΩÔøΩ—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è viewport
        let available_size = ui.available_size();

        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã—ÅÔøΩÔøΩ–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        let pixels_per_point = ui.ctx().pixels_per_point();
        let viewport_width = (available_size.x * pixels_per_point) as u32;
        let viewport_height = (available_size.y * pixels_per_point) as u32;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä viewport –∏ –∫–∞–º–µ—Ä—É, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è
        if viewport_width > 0 && viewport_height > 0 {
            self.update_viewport_size(viewport_width, viewport_height);
        }

        if let Some(texture) = &self.texture {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            let resp = ui.image((texture.id(), available_size));
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞–¥ viewport
            self.viewport_has_pointer = resp.hovered();
        } else {
            // –¢–µ–∫—Å—Ç—É—Ä—ã –Ω–µ—Ç ‚Äî –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ viewport –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            self.viewport_has_pointer = false;
        }
    }

    fn render_material_controls(&mut self, ui: &mut Ui) {
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞
        if self.view_mode == ViewMode::Morph {
            return;
        }

        ui.separator();
        ui.add_space(10.0);
        ui.label("üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞:");
        ui.add_space(5.0);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        let mut material_changed = false;

        match self.view_mode {
            ViewMode::Source => {
                if let Some(ref mut mesh) = self.source_mesh {
                    ui.group(|ui| {
                        ui.vertical(|ui| {
                            ui.label("–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç:");
                            ui.add_space(5.0);
                            material_changed = Self::render_material_sliders_static(ui, &mut mesh.material);
                        });
                    });
                }
            },
            ViewMode::Target => {
                if let Some(ref mut mesh) = self.target_mesh {
                    ui.group(|ui| {
                        ui.vertical(|ui| {
                            ui.label("–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç:");
                            ui.add_space(5.0);
                            material_changed = Self::render_material_sliders_static(ui, &mut mesh.material);
                        });
                    });
                }
            },
            ViewMode::Morph => {
                // –í —Ä–µ–∂–∏–º–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            },
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if material_changed {
            self.update_scene_objects();
            self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        }
    }

    fn render_material_sliders_static(ui: &mut Ui, material: &mut model3d::Material) -> bool {
        let mut changed = false;

        ui.vertical(|ui| {
            ui.label("–¶–≤–µ—Ç:");
            ui.add_space(3.0);
            let mut color = [
                material.color.0[0] as f32 / 255.0,
                material.color.0[1] as f32 / 255.0,
                material.color.0[2] as f32 / 255.0,
            ];
            if ui.color_edit_button_rgb(&mut color).changed() {
                material.color = image::Rgb([
                    (color[0] * 255.0) as u8,
                    (color[1] * 255.0) as u8,
                    (color[2] * 255.0) as u8,
                ]);
                changed = true;
            }
        });

        ui.add_space(8.0);

        ui.vertical(|ui| {
            ui.label("–î–∏—Ñ—Ñ—É–∑–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ:");
            ui.add_space(3.0);
            if ui.add_sized(
                Vec2::new(ui.available_width(), 20.0),
                egui::Slider::new(&mut material.diffuse_reflectance_factor, 0.0..=1.0)
                    .step_by(0.01)
                    .fixed_decimals(2)
            ).changed() {
                changed = true;
            }
        });

        ui.add_space(5.0);

        ui.vertical(|ui| {
            ui.label("–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ:");
            ui.add_space(3.0);
            if ui.add_sized(
                Vec2::new(ui.available_width(), 20.0),
                egui::Slider::new(&mut material.specular_reflectance_factor, 0.0..=1.0)
                    .step_by(0.01)
                    .fixed_decimals(2)
            ).changed() {
                changed = true;
            }
        });

        ui.add_space(5.0);

        ui.vertical(|ui| {
            ui.label("–ì–ª—è–Ω—Ü–µ–≤–æ—Å—Ç—å:");
            ui.add_space(3.0);
            if ui.add_sized(
                Vec2::new(ui.available_width(), 20.0),
                egui::Slider::new(&mut material.gloss, 0.1..=15.0)
                    .step_by(0.01)
                    .fixed_decimals(2)
            ).changed() {
                changed = true;
            }
        });

        changed
    }
}
