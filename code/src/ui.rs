use crate::objects::model3d;
use crate::app::{MyEguiApp, ViewMode};
use eframe::egui::{Context, SidePanel, CentralPanel, Ui};

impl MyEguiApp {
    pub fn render_ui(&mut self, ctx: &Context) {
        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        SidePanel::right("controls_panel")
            .resizable(true)
            .default_width(300.0)
            .show(ctx, |ui| {
                ui.heading("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");

                // UI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                self.render_file_selection(ui);

                // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
                self.render_morph_controls(ui);

                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
                self.render_transform_controls(ui);

                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                self.render_material_controls(ui);

                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–æ–º
                self.render_morph_instructions(ui);

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FPS
                ui.separator();
                ui.label(format!("FPS: {}", self.fps as u32));
            });

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –æ–∫–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        CentralPanel::default().show(ctx, |ui| {
            ui.heading("–ú–æ—Ä—Ñ–∏–Ω–≥ 3D –æ–±—ä–µ–∫—Ç–æ–≤");

            // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–µ—Ä—Ö—É
            self.render_view_mode_controls(ui);

            ui.separator();

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.render_viewport(ui);
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
        if let Some(error_msg) = &self.error_message.clone() {
            egui::Window::new("‚ö† –û—à–∏–±–∫–∞")
                .collapsible(false)
                .resizable(false)
                .anchor(egui::Align2::CENTER_CENTER, [0.0, 0.0])
                .show(ctx, |ui| {
                    ui.label(error_msg);
                    ui.separator();
                    if ui.button("OK").clicked() {
                        self.error_message = None;
                    }
                });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–¥—Ä
        self.update_frame(ctx);
    }

    fn render_file_selection(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.label("–í—ã–±–æ—Ä OBJ —Ñ–∞–π–ª–æ–≤:");

        // –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        ui.horizontal(|ui| {
            ui.label("–ò—Å—Ö–æ–¥–Ω—ã–π:");
            ui.vertical(|ui| {
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞
                if ui.button("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...").clicked() {
                    self.open_file_dialog(false);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                if !self.selected_source_file.is_empty() {
                    ui.label(format!("–í—ã–±—Ä–∞–Ω: {}", self.selected_source_file));
                }
            });
        });

        ui.separator();

        // –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
        ui.horizontal(|ui| {
            ui.label("–¶–µ–ª–µ–≤–æ–π:");
            ui.vertical(|ui| {
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—é–±–æ–≥–æ —Ñ–∞–π–ª–∞
                if ui.button("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª...").clicked() {
                    self.open_file_dialog(true);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                if !self.selected_target_file.is_empty() {
                    ui.label(format!("–í—ã–±—Ä–∞–Ω: {}", self.selected_target_file));
                }
            });
        });
    }

    fn render_morph_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        let can_create_morph = self.source_mesh.is_some() && self.target_mesh.is_some();
        let button_text = if self.morph_created { "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥" } else { "–°–æ–∑–¥–∞—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥" };

        ui.horizontal(|ui| {
            if ui.add_enabled(can_create_morph, egui::Button::new(button_text)).clicked() {
                self.create_morph_object();
            }
            if !can_create_morph {
                ui.label("(–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç—ã)");
            }
        });
    }

    fn render_transform_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º:");

        let has_object = match self.view_mode {
            ViewMode::Source => self.source_mesh.is_some(),
            ViewMode::Target => self.target_mesh.is_some(),
            ViewMode::Morph => self.morph_object.is_some(),
        };

        if !has_object {
            ui.label("(–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)");
            return;
        }

        // –ü–æ–≤–æ—Ä–æ—Ç
        ui.label("–ü–æ–≤–æ—Ä–æ—Ç (–≥—Ä–∞–¥—É—Å—ã):");
        ui.horizontal(|ui| {
            if ui.button("‚Ü∫ X +15¬∞").clicked() {
                self.apply_button_rotation(15.0, 0.0, 0.0);
            }
            if ui.button("‚Üª X -15¬∞").clicked() {
                self.apply_button_rotation(-15.0, 0.0, 0.0);
            }
        });
        ui.horizontal(|ui| {
            if ui.button("‚Ü∫ Y +15¬∞").clicked() {
                self.apply_button_rotation(0.0, 15.0, 0.0);
            }
            if ui.button("‚Üª Y -15¬∞").clicked() {
                self.apply_button_rotation(0.0, -15.0, 0.0);
            }
        });
        ui.horizontal(|ui| {
            if ui.button("‚Ü∫ Z +15¬∞").clicked() {
                self.apply_button_rotation(0.0, 0.0, 15.0);
            }
            if ui.button("‚Üª Z -15¬∞").clicked() {
                self.apply_button_rotation(0.0, 0.0, -15.0);
            }
        });

        ui.add_space(5.0);

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        ui.label("–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:");
        ui.horizontal(|ui| {
            if ui.button("üîç –£–≤–µ–ª–∏—á–∏—Ç—å x1.1").clicked() {
                self.apply_button_scale(1.1);
            }
            if ui.button("üîç –£–º–µ–Ω—å—à–∏—Ç—å x0.9").clicked() {
                self.apply_button_scale(0.9);
            }
        });

        ui.add_space(5.0);

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
        if ui.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è").clicked() {
            self.reset_current_object();
        }
    }

    fn render_view_mode_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.label("–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:");

        let old_view_mode = self.view_mode.clone();

        ui.horizontal(|ui| {
            ui.radio_value(&mut self.view_mode, ViewMode::Source, "–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç");
            ui.radio_value(&mut self.view_mode, ViewMode::Target, "–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç");
            ui.add_enabled(self.morph_created, egui::RadioButton::new(self.view_mode == ViewMode::Morph, "–ú–æ—Ä—Ñ–∏–Ω–≥"));
            if ui.radio_value(&mut self.view_mode, ViewMode::Morph, "").clicked() && !self.morph_created {
                self.view_mode = old_view_mode.clone(); // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ä–µ–∂–∏–º—É –µ—Å–ª–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        if old_view_mode != self.view_mode {
            self.update_scene_objects();
            self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        }
    }

    fn render_morph_instructions(&mut self, ui: &mut Ui) {
        if self.view_mode == ViewMode::Morph && self.morph_created {
            ui.separator();
            ui.label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–æ–º:");

            // –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∑–æ–π –º–æ—Ä—Ñ–∏–Ω–≥–∞
            let old_phase = self.morph_phase;
            ui.horizontal(|ui| {
                ui.label("–§–∞–∑–∞ –º–æ—Ä—Ñ–∏–Ω–≥–∞:");
                ui.add(egui::Slider::new(&mut self.morph_phase, 0.0..=1.0)
                    .step_by(0.01)
                    .text(""));
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ—Ä—Ñ-–æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (old_phase - self.morph_phase).abs() > f64::EPSILON {
                if let Some(ref mut morph) = self.morph_object {
                    morph.update(self.morph_phase);
                }
                self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–∑—ã –º–æ—Ä—Ñ–∏–Ω–≥–∞
            }
        }
    }

    fn render_viewport(&mut self, ui: &mut Ui) {
        ui.separator();
        if let Some(texture) = &self.texture {
            let available_size = ui.available_size();
            let texture_size = texture.size_vec2();
            let aspect_ratio = texture_size.x / texture_size.y;

            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            let display_size = if available_size.x / available_size.y > aspect_ratio {
                egui::Vec2::new(available_size.y * aspect_ratio, available_size.y)
            } else {
                egui::Vec2::new(available_size.x, available_size.x / aspect_ratio)
            };

            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º Response, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞–≤–µ–¥–µ–Ω –ª–∏ –∫—É—Ä—Å–æ—Ä
            let resp = ui.image((texture.id(), display_size));
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞–¥ viewport
            self.viewport_has_pointer = resp.hovered();
        } else {
            // –¢–µ–∫—Å—Ç—É—Ä—ã –Ω–µ—Ç ‚Äî –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ viewport –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            self.viewport_has_pointer = false;
        }
    }

    fn render_material_controls(&mut self, ui: &mut Ui) {
        ui.separator();
        ui.label("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞:");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        let mut material_changed = false;

        match self.view_mode {
            ViewMode::Source => {
                if let Some(ref mut mesh) = self.source_mesh {
                    ui.label("–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç:");
                    material_changed = Self::render_material_sliders_static(ui, &mut mesh.material);
                }
            },
            ViewMode::Target => {
                if let Some(ref mut mesh) = self.target_mesh {
                    ui.label("–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–∫—Ç:");
                    material_changed = Self::render_material_sliders_static(ui, &mut mesh.material);
                }
            },
            ViewMode::Morph => {
                ui.label("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ä–µ–∂–∏–º");
                ui.label("–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞");
            },
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if material_changed {
            self.update_scene_objects();
            self.needs_redraw = true; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏ÔøΩÔøΩ–ª–∞
        }
    }

    fn render_material_sliders_static(ui: &mut Ui, material: &mut model3d::Material) -> bool {
        let mut changed = false;

        ui.horizontal(|ui| {
            ui.label("–¶–≤–µ—Ç:");
            let mut color = [
                material.color.0[0] as f32 / 255.0,
                material.color.0[1] as f32 / 255.0,
                material.color.0[2] as f32 / 255.0,
            ];
            if ui.color_edit_button_rgb(&mut color).changed() {
                material.color = image::Rgb([
                    (color[0] * 255.0) as u8,
                    (color[1] * 255.0) as u8,
                    (color[2] * 255.0) as u8,
                ]);
                changed = true;
            }
        });

        ui.horizontal(|ui| {
            ui.label("–î–∏—Ñ—Ñ—É–∑–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ:");
            if ui.add(egui::Slider::new(&mut material.diffuse_reflectance_factor, 0.0..=1.0)
                .step_by(0.01)).changed() {
                changed = true;
            }
        });

        ui.horizontal(|ui| {
            ui.label("–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ:");
            if ui.add(egui::Slider::new(&mut material.specular_reflectance_factor, 0.0..=1.0)
                .step_by(0.01)).changed() {
                changed = true;
            }
        });

        ui.horizontal(|ui| {
            ui.label("–ì–ª—è–Ω—Ü–µ–≤–æ—Å—Ç—å:");
            if ui.add(egui::Slider::new(&mut material.gloss, 1.0..=128.0)
                .step_by(1.0)).changed() {
                changed = true;
            }
        });

        changed
    }
}
